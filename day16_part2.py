data_2 = """7 3 2 0
7 2 1 1
7 1 0 3
8 1 0 1
14 1 2 1
1 2 1 2
7 3 3 1
7 2 0 0
14 3 0 3
13 3 2 3
0 1 0 1
14 1 1 1
1 1 2 2
7 2 2 1
7 3 1 0
7 1 0 3
1 3 3 3
14 3 3 3
1 2 3 2
3 2 1 0
14 3 0 3
13 3 0 3
7 2 3 2
14 2 0 1
13 1 0 1
6 3 2 2
14 2 2 2
1 0 2 0
7 3 1 1
7 2 2 3
14 3 0 2
13 2 0 2
7 2 1 3
14 3 3 3
1 0 3 0
7 0 0 3
14 0 0 2
13 2 3 2
14 0 0 1
13 1 1 1
10 3 2 3
14 3 2 3
1 0 3 0
3 0 1 1
7 0 1 0
7 1 1 2
7 3 1 3
9 3 2 0
14 0 1 0
1 1 0 1
3 1 0 3
14 0 0 2
13 2 2 2
7 3 2 1
14 2 0 0
13 0 1 0
3 0 2 0
14 0 2 0
1 0 3 3
3 3 2 1
7 2 1 0
14 2 0 2
13 2 3 2
14 0 0 3
13 3 2 3
8 0 2 2
14 2 2 2
1 1 2 1
14 0 0 2
13 2 0 2
14 1 0 3
13 3 1 3
15 3 0 2
14 2 1 2
1 2 1 1
3 1 0 0
14 2 0 1
13 1 3 1
7 2 1 3
7 2 0 2
5 2 3 3
14 3 2 3
14 3 3 3
1 0 3 0
3 0 0 3
7 1 1 2
7 2 1 1
7 3 0 0
8 1 0 1
14 1 2 1
14 1 3 1
1 3 1 3
3 3 0 1
7 0 0 3
14 1 0 0
13 0 0 0
7 2 2 2
7 3 2 0
14 0 2 0
1 1 0 1
7 1 1 2
14 2 0 3
13 3 2 3
7 3 3 0
9 0 2 2
14 2 1 2
1 2 1 1
3 1 2 2
14 1 0 1
13 1 0 1
7 1 2 0
7 3 1 3
13 0 1 1
14 1 1 1
1 2 1 2
3 2 0 1
7 2 0 3
7 2 3 2
7 2 3 0
5 0 3 2
14 2 2 2
1 1 2 1
3 1 1 0
14 0 0 1
13 1 2 1
14 0 0 2
13 2 3 2
14 2 0 3
13 3 3 3
8 1 2 1
14 1 1 1
1 1 0 0
3 0 0 2
7 3 3 0
7 2 3 3
7 0 0 1
0 0 3 3
14 3 2 3
1 3 2 2
3 2 0 3
14 3 0 2
13 2 2 2
7 1 1 1
12 2 0 0
14 0 2 0
1 0 3 3
3 3 3 1
7 0 2 3
7 3 0 2
7 2 3 0
8 0 2 3
14 3 3 3
1 3 1 1
7 3 3 3
2 0 2 2
14 2 2 2
14 2 1 2
1 2 1 1
3 1 3 3
7 1 0 0
7 3 2 1
7 2 3 2
3 0 2 1
14 1 1 1
14 1 3 1
1 1 3 3
3 3 1 0
14 1 0 1
13 1 0 1
7 3 2 2
7 0 1 3
7 2 1 1
14 1 1 1
1 0 1 0
3 0 0 1
7 2 0 0
7 2 2 2
7 2 2 3
11 0 3 2
14 2 3 2
1 1 2 1
14 1 0 2
13 2 3 2
7 0 3 3
2 0 2 0
14 0 2 0
14 0 3 0
1 1 0 1
3 1 2 0
7 2 3 2
7 3 3 1
7 3 2 3
12 2 1 1
14 1 3 1
1 1 0 0
7 0 0 1
7 0 2 2
7 2 0 3
10 2 3 2
14 2 3 2
1 2 0 0
3 0 3 1
14 3 0 0
13 0 0 0
7 2 2 2
5 2 3 3
14 3 1 3
1 3 1 1
3 1 2 2
7 1 0 3
14 0 0 1
13 1 2 1
7 2 1 0
4 0 3 1
14 1 2 1
1 2 1 2
3 2 3 0
7 3 1 3
7 3 3 1
7 1 0 2
9 3 2 1
14 1 3 1
14 1 1 1
1 0 1 0
3 0 0 2
7 0 3 3
14 2 0 1
13 1 3 1
7 2 2 0
12 0 1 0
14 0 1 0
1 0 2 2
14 0 0 0
13 0 2 0
5 0 3 0
14 0 2 0
1 2 0 2
3 2 2 0
7 2 1 3
7 2 1 2
12 2 1 1
14 1 2 1
1 0 1 0
3 0 2 2
7 0 3 1
7 2 3 0
11 0 3 0
14 0 3 0
14 0 2 0
1 0 2 2
3 2 3 1
7 1 0 0
7 3 2 2
7 3 3 3
14 0 2 2
14 2 2 2
1 2 1 1
3 1 3 2
7 1 0 3
7 3 1 1
7 2 0 0
15 3 0 3
14 3 3 3
1 3 2 2
3 2 3 1
7 1 0 3
7 1 0 0
14 1 0 2
13 2 2 2
1 0 3 3
14 3 2 3
14 3 2 3
1 3 1 1
3 1 2 3
14 0 0 2
13 2 3 2
7 0 3 1
13 0 1 1
14 1 2 1
1 1 3 3
3 3 2 2
14 3 0 3
13 3 1 3
7 2 0 1
7 3 3 0
1 3 3 1
14 1 3 1
1 1 2 2
3 2 1 1
7 2 2 0
7 0 3 3
7 2 1 2
6 3 2 3
14 3 1 3
1 3 1 1
3 1 1 3
7 1 1 0
7 1 0 1
7 3 3 2
14 1 2 2
14 2 3 2
14 2 1 2
1 2 3 3
7 3 3 1
7 2 2 2
3 0 2 2
14 2 3 2
1 2 3 3
3 3 2 1
7 0 3 3
7 2 2 2
7 3 2 0
12 2 0 3
14 3 3 3
1 1 3 1
7 0 3 3
7 3 0 2
14 1 0 0
13 0 2 0
2 0 2 2
14 2 2 2
1 1 2 1
7 3 1 3
7 3 0 2
0 3 0 3
14 3 1 3
1 3 1 1
14 2 0 3
13 3 1 3
4 0 3 3
14 3 2 3
14 3 1 3
1 1 3 1
3 1 1 0
14 1 0 2
13 2 2 2
7 1 2 1
7 0 2 3
6 3 2 3
14 3 1 3
1 3 0 0
3 0 2 3
14 3 0 1
13 1 0 1
7 1 3 0
3 0 2 0
14 0 2 0
14 0 2 0
1 0 3 3
14 0 0 0
13 0 1 0
7 0 0 2
14 0 2 2
14 2 1 2
1 3 2 3
7 2 2 2
3 0 2 2
14 2 3 2
1 3 2 3
3 3 2 2
7 2 1 0
7 2 0 3
11 0 3 3
14 3 2 3
1 3 2 2
3 2 0 0
7 2 3 1
7 0 2 3
7 2 1 2
6 3 2 3
14 3 3 3
14 3 1 3
1 0 3 0
7 0 3 3
6 3 2 2
14 2 1 2
1 0 2 0
14 0 0 3
13 3 1 3
7 1 0 1
7 0 2 2
14 1 2 2
14 2 2 2
14 2 2 2
1 0 2 0
3 0 1 3
7 2 1 0
7 3 3 2
14 1 2 0
14 0 2 0
1 3 0 3
3 3 0 0
14 0 0 3
13 3 2 3
7 0 2 2
10 2 3 2
14 2 1 2
1 2 0 0
3 0 1 1
14 0 0 2
13 2 3 2
14 1 0 3
13 3 0 3
7 3 2 0
7 2 0 0
14 0 1 0
1 0 1 1
7 0 1 2
7 0 0 0
7 2 1 3
10 2 3 3
14 3 2 3
1 1 3 1
7 2 0 3
10 2 3 0
14 0 1 0
1 1 0 1
7 2 3 2
7 0 2 3
7 3 1 0
8 2 0 0
14 0 3 0
1 1 0 1
7 3 0 3
14 0 0 2
13 2 0 2
7 1 3 0
9 3 2 3
14 3 1 3
1 1 3 1
7 0 3 3
7 3 2 2
7 0 1 0
10 3 2 3
14 3 2 3
1 1 3 1
3 1 3 3
7 3 3 0
7 1 3 1
7 0 2 2
2 2 0 2
14 2 1 2
1 3 2 3
3 3 1 1
7 2 3 2
7 2 0 0
7 0 3 3
6 3 2 2
14 2 2 2
1 2 1 1
3 1 3 2
7 1 2 1
7 2 3 3
15 1 0 3
14 3 2 3
14 3 3 3
1 2 3 2
7 1 0 3
7 2 3 1
4 0 3 0
14 0 2 0
1 0 2 2
3 2 2 0
14 2 0 2
13 2 1 2
7 0 3 3
5 1 3 3
14 3 1 3
1 0 3 0
3 0 2 1
7 2 1 0
7 1 3 3
15 3 0 3
14 3 3 3
14 3 1 3
1 1 3 1
3 1 3 3
7 1 2 1
7 0 2 2
7 1 1 0
14 0 2 1
14 1 2 1
1 1 3 3
3 3 1 2
7 3 0 1
7 2 0 0
14 2 0 3
13 3 1 3
13 3 1 3
14 3 2 3
14 3 3 3
1 3 2 2
3 2 2 0
7 0 0 2
7 3 0 3
9 3 2 1
14 1 2 1
14 1 3 1
1 0 1 0
7 0 1 3
7 3 3 1
7 2 0 2
12 2 1 3
14 3 1 3
14 3 1 3
1 3 0 0
7 1 2 3
14 0 0 2
13 2 3 2
1 3 3 3
14 3 1 3
1 3 0 0
3 0 0 2
7 2 2 3
7 2 1 0
11 0 3 0
14 0 3 0
1 0 2 2
3 2 3 3
7 3 1 2
7 1 3 0
13 0 1 2
14 2 2 2
1 3 2 3
7 1 0 1
7 2 1 0
7 1 3 2
15 1 0 1
14 1 1 1
14 1 1 1
1 1 3 3
3 3 3 0
7 3 1 1
7 3 1 3
14 2 0 2
13 2 0 2
9 3 2 3
14 3 2 3
14 3 3 3
1 3 0 0
3 0 1 1
7 2 1 0
7 1 2 2
7 2 1 3
11 0 3 2
14 2 2 2
14 2 1 2
1 1 2 1
7 2 0 2
7 0 2 0
7 1 0 3
1 3 3 3
14 3 1 3
1 1 3 1
3 1 0 0
14 2 0 1
13 1 3 1
7 0 2 2
7 1 3 3
1 3 3 2
14 2 1 2
1 0 2 0
3 0 3 2
7 0 3 0
7 0 3 3
7 2 2 1
7 3 0 3
14 3 1 3
14 3 3 3
1 2 3 2
3 2 1 1
7 2 2 2
7 2 0 3
7 3 0 0
12 2 0 0
14 0 3 0
14 0 1 0
1 0 1 1
7 1 3 2
7 2 0 0
7 1 3 3
4 0 3 3
14 3 1 3
1 3 1 1
14 2 0 3
13 3 0 3
7 3 1 0
14 0 0 2
13 2 2 2
6 3 2 3
14 3 2 3
1 3 1 1
3 1 2 2
7 0 0 1
14 3 0 3
13 3 1 3
7 2 2 0
15 3 0 0
14 0 3 0
1 2 0 2
3 2 2 1
7 0 0 2
14 3 0 0
13 0 3 0
9 0 2 0
14 0 2 0
1 0 1 1
7 2 2 0
7 0 3 3
7 3 1 2
8 0 2 2
14 2 1 2
14 2 3 2
1 2 1 1
3 1 1 0
14 1 0 1
13 1 3 1
7 2 0 2
6 3 2 2
14 2 3 2
1 0 2 0
3 0 1 1
7 1 1 3
7 2 0 0
7 3 1 2
7 2 3 0
14 0 2 0
1 0 1 1
7 0 0 3
14 0 0 0
13 0 1 0
10 3 2 2
14 2 1 2
1 2 1 1
3 1 0 0
14 3 0 2
13 2 0 2
7 0 2 1
7 2 2 3
10 2 3 1
14 1 1 1
1 0 1 0
3 0 1 1
14 2 0 0
13 0 2 0
7 3 1 2
7 1 2 3
8 0 2 0
14 0 3 0
1 1 0 1
3 1 2 2
7 2 3 1
7 2 1 3
7 2 3 0
11 0 3 1
14 1 1 1
1 2 1 2
3 2 0 1
14 2 0 2
13 2 2 2
14 3 0 0
13 0 3 0
7 0 0 3
6 3 2 2
14 2 1 2
1 1 2 1
7 0 2 0
7 2 1 2
7 3 0 0
14 0 3 0
1 0 1 1
3 1 0 3
7 3 1 0
7 3 3 2
14 0 0 1
13 1 2 1
8 1 0 0
14 0 3 0
1 3 0 3
3 3 2 1
7 0 2 0
7 0 2 3
7 2 0 2
6 3 2 2
14 2 2 2
14 2 3 2
1 2 1 1
3 1 1 0
7 3 3 1
7 1 3 3
7 0 1 2
9 1 2 1
14 1 2 1
1 0 1 0
3 0 0 3
7 2 0 1
7 3 2 0
9 0 2 2
14 2 3 2
1 2 3 3
14 1 0 2
13 2 2 2
7 1 2 1
12 2 0 1
14 1 3 1
14 1 1 1
1 1 3 3
3 3 1 2
7 2 0 0
7 1 2 3
7 1 3 1
4 0 3 1
14 1 2 1
14 1 3 1
1 1 2 2
7 3 3 1
7 2 2 3
12 0 1 0
14 0 3 0
1 0 2 2
3 2 2 1
7 3 1 2
7 3 2 0
0 0 3 2
14 2 3 2
1 1 2 1
3 1 0 0
7 2 1 2
7 1 2 1
15 1 3 2
14 2 1 2
14 2 2 2
1 2 0 0
3 0 2 1
7 1 0 3
7 1 2 2
7 1 1 0
1 3 3 2
14 2 3 2
14 2 2 2
1 2 1 1
3 1 0 2
7 0 1 0
7 2 3 1
1 3 3 0
14 0 1 0
1 0 2 2
3 2 0 0
7 1 1 1
7 2 0 3
7 3 3 2
15 1 3 3
14 3 3 3
1 0 3 0
7 2 0 2
7 0 1 3
7 0 3 1
6 3 2 1
14 1 2 1
14 1 1 1
1 0 1 0
3 0 2 3
7 3 1 2
7 3 3 0
7 3 2 1
7 2 0 2
14 2 1 2
1 2 3 3
7 3 2 2
7 1 2 1
9 0 2 0
14 0 2 0
14 0 3 0
1 3 0 3
3 3 0 1
7 1 3 3
14 1 0 0
13 0 3 0
7 2 3 2
12 2 0 3
14 3 3 3
1 1 3 1
3 1 2 0
7 3 1 2
7 3 0 1
7 1 1 3
14 3 2 3
14 3 2 3
14 3 1 3
1 0 3 0
3 0 3 1
7 1 3 3
7 0 2 2
7 2 3 0
4 0 3 2
14 2 2 2
1 2 1 1
7 1 2 0
7 2 3 3
7 0 0 2
10 2 3 3
14 3 1 3
1 3 1 1
7 3 1 3
7 3 2 0
2 2 0 2
14 2 1 2
14 2 1 2
1 2 1 1
14 2 0 0
13 0 1 0
7 3 0 2
7 0 2 3
7 2 0 0
14 0 2 0
1 0 1 1
3 1 0 3
14 1 0 0
13 0 3 0
7 2 0 2
7 2 2 1
8 2 0 1
14 1 3 1
14 1 3 1
1 1 3 3
3 3 2 2
7 2 3 0
7 2 1 3
7 3 3 1
0 1 0 3
14 3 2 3
14 3 1 3
1 3 2 2
3 2 3 1
7 0 0 2
7 3 0 0
7 2 2 3
9 0 2 0
14 0 1 0
1 0 1 1
7 2 3 2
7 0 1 3
7 0 2 0
5 2 3 2
14 2 2 2
1 1 2 1
3 1 1 2
7 2 0 1
5 1 3 1
14 1 1 1
1 2 1 2
3 2 3 1
7 3 0 3
7 0 0 2
14 2 0 0
13 0 1 0
14 0 2 0
14 0 3 0
1 1 0 1
3 1 1 3
7 2 2 1
7 3 2 0
8 1 0 1
14 1 3 1
1 1 3 3
3 3 2 1
14 2 0 3
13 3 0 3
14 1 0 0
13 0 0 0
14 0 0 2
13 2 3 2
10 3 2 2
14 2 1 2
14 2 2 2
1 1 2 1
3 1 3 2
7 2 3 0
14 2 0 3
13 3 1 3
7 0 1 1
1 3 3 1
14 1 3 1
1 1 2 2
3 2 2 1
14 0 0 2
13 2 2 2
7 1 1 0
7 0 0 3
3 0 2 0
14 0 3 0
1 0 1 1
3 1 1 2
7 2 2 3
7 2 0 0
7 3 0 1
5 0 3 0
14 0 3 0
1 2 0 2
7 2 3 0
14 1 0 3
13 3 0 3
14 1 0 1
13 1 1 1
15 1 0 3
14 3 1 3
1 3 2 2
3 2 2 1
7 2 1 2
14 0 0 3
13 3 1 3
7 0 1 0
7 3 0 0
14 0 2 0
1 0 1 1
3 1 1 2
7 2 1 3
7 3 0 1
7 2 3 0
11 0 3 3
14 3 3 3
1 2 3 2
3 2 1 1
7 2 2 3
7 0 1 2
14 1 0 0
13 0 0 0
10 2 3 2
14 2 1 2
14 2 3 2
1 2 1 1
7 3 3 0
7 3 0 3
7 3 2 2
9 3 2 2
14 2 1 2
1 2 1 1
3 1 2 2
14 0 0 1
13 1 0 1
7 0 0 3
7 1 1 0
13 0 1 0
14 0 1 0
14 0 2 0
1 2 0 2
14 2 0 0
13 0 2 0
7 2 3 3
11 0 3 1
14 1 2 1
1 1 2 2
3 2 1 1
7 3 3 3
7 3 3 2
2 0 2 3
14 3 1 3
14 3 3 3
1 1 3 1
3 1 0 3
7 1 1 2
7 3 0 1
12 0 1 1
14 1 2 1
1 1 3 3
3 3 3 1
14 3 0 2
13 2 0 2
7 2 2 3
11 0 3 3
14 3 2 3
1 1 3 1
3 1 1 2
7 3 3 1
7 1 2 3
4 0 3 3
14 3 3 3
14 3 2 3
1 2 3 2
3 2 0 0
7 0 2 2
14 2 0 3
13 3 1 3
1 3 3 1
14 1 2 1
14 1 2 1
1 1 0 0
3 0 2 2
7 2 1 0
7 1 0 1
15 1 0 1
14 1 2 1
14 1 2 1
1 2 1 2
3 2 2 1
7 3 3 3
7 3 2 2
8 0 2 0
14 0 3 0
1 0 1 1
7 0 2 2
7 2 1 3
14 1 0 0
13 0 3 0
2 2 0 0
14 0 3 0
14 0 3 0
1 0 1 1
3 1 0 2
7 2 2 0
7 2 3 1
11 0 3 0
14 0 3 0
14 0 1 0
1 0 2 2
3 2 2 3
7 2 2 0
7 1 3 2
14 3 0 1
13 1 3 1
12 0 1 0
14 0 2 0
14 0 3 0
1 3 0 3
3 3 2 0
7 2 2 2
7 0 1 3
6 3 2 3
14 3 1 3
1 3 0 0""".strip().split('\n')


import re

def get_digits(line):
    digits = [int(match[0]) for match in re.finditer(r'\d+',line)]
    return digits

def addr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] + before[code_2]
    return after

def addi__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] + code_2
    return after


def mulr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] * before[code_2]
    return after


def muli__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] * code_2
    return after


def banr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] & before[code_2]
    return after


def bani__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] & code_2
    return after


def borr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] | before[code_2]
    return after
    

def bori__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1] | code_2
    return after
 

def setr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = before[code_1]
    return after


def seti__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    after[code_3] = code_1
    return after

        
def gtir__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if (code_1 > before[code_2]):
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after

def gtri__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if before[code_1] > code_2:
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after


def gtrr_(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if before[code_1] > before[code_2]:
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after


def eqir__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if code_1 == before[code_2]:
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after                   

def eqri__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if before[code_1] == code_2:
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after


def eqrr__(before,codes):
    code_1 = codes[1]
    code_2 = codes[2]
    code_3 = codes[3]
    after = before
    if before[code_1] == before[code_2]:
        after[code_3] = 1
    else:
        after[code_3] = 0
    return after

# func_dict output from Registers Part 1
func_dict = {14: muli__, 13: addi__, 15: mulr__, 1: addr__, 8: borr__, 5: bori__, 7: seti__, 11: eqrr__, \
             2: eqri__, 10: eqir__, 12: gtri__, 4: gtrr_, 6: gtir__, 3: setr__, 0: banr__, 9: bani__}

def part_2(func_dict, data):
    instructions = [get_digits(x) for x in data]
    start = [0,0,0,0]
    for i in instructions:
        opcode = i[0]
        formula = func_dict[opcode]
        after = formula(start,i)
        start = after
    print(start)

part_2(func_dict,data_2)
